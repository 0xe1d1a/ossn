<?php

define('__OSSN_SW_VISUALIZE__', ossn_route()->com . 'SWvisualize/');

$html = "The following graph depicts the connections between members";

//this function is use to initilize ossn
function ossn_analysis() {


  //$icon = ossn_site_url("components/mycom/images/icon.png"); icon for the link
    ossn_register_sections_menu("newsfeed", array(
        "text" => "Graph Viewer",
        "url" => ossn_site_url("graph"),
        "section" => "links",
        "icon" => ""
    ));
    ossn_extend_view('css/ossn.default', 'css/swvisualize');
    //ossn_extend_view('js/opensource.socialnetwork', 'js/swvisualize');
    ossn_register_page('graph', 'ossn_sw_pagehandler');
    //ossn_register_page('events', 'ossn_sw_event_pagehandler');
    $icon = ossn_site_url("noicon");
    ossn_register_sections_menu("newsfeed", array(
        "text" => "Map Viewer",
        "url" => ossn_site_url('eventmap'),//"http://178.62.200.142/ossn/map/map.html",
        "section" => "links",
        "icon" => $icon
    ));
    ossn_register_page('eventmap', 'ossn_sw_event_pagehandler');

}

function ossn_sw_event_pagehandler(){
   if (!ossn_isLoggedin()) {
            ossn_error_page();
   }
   $title = ossn_print('Event Viewer');
   $contents['content'] = '
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js"></script>
	<script type="text/javascript"
      		src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBM9TG8wK41wmhipu9gf2HHQ8Pg6AbF1Zo">
        </script>
	<h3> Here you can browse the events of your fellow researchers </h3>


';
   $content = ossn_set_page_layout('newsfeed', $contents);
   echo ossn_view_page($title, $content);       
}

function ossn_sw_pagehandler(){
   if (!ossn_isLoggedin()) {
            ossn_error_page();
   }
   $title = ossn_print("Graph Viewer");
   $contents['content'] = '

	<script src="//d3js.org/d3.v3.min.js"></script><strong> 

<h3>  This graph shows the relations between the researchers (based on Google Scholar) </h3>
	<div id="graph"></div>
	<br>
<h3>  The relations between the researchers defined by topics(based on Google Scholar) </h3>
	<div id="grapht"></div>
<h3>  The clustered outline of topics and researchers (based on Google Scholar)
	<br>
	<div id="graphc"></div>
   <script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var width = 960,
    height = 500;
var color = d3.scale.category20();

var force = d3.layout.force()
    .charge(-200)
    .linkDistance(90)
    .size([width, height]);

var svg = d3.select("#graph").append("svg")
    .attr("width", width)
    .attr("height", height);

d3.json("auth.json", function(error, graph) {
  if (error) throw error;

  force
      .nodes(graph.nodes)
      .links(graph.links)
      .start();

  var link = svg.selectAll(".link")
      .data(graph.links)
    .enter().append("line")
      .attr("class", "link")
      .style("stroke-width", function(d) { return Math.sqrt(d.value); });

  var node = svg.selectAll(".node")
      .data(graph.nodes)
    .enter().append("circle")
      .attr("class", "node")
      .attr("r", 15)
      .style("fill", "#0066FF")
      .call(force.drag);
  
});  node.append("text")
      .attr("dx", 12)
      .attr("dy", ".35em")
      .text(function(d) { return d.Name });

   //node.append("title")
   // .text(function(d) { return d.Name; });

  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  });
});

</script>

<script>

  var width2 = 960,
      height2 = 500;

  var color2 = d3.scale.category20();

  var force2 = d3.layout.force()
      .charge(-200)
      .linkDistance(120)
      .size([width2, height2]);

  var svg2 = d3.select("#grapht").append("svg")
      .attr("width", width2)
      .attr("height", height2);

  d3.json("topics.json", function(error, graph) {
    if (error) throw error;

    force2
        .nodes(graph.nodes)
        .links(graph.links)
        .start();

    var link2 = svg2.selectAll(".link")
        .data(graph.links)
      .enter().append("line")
        .attr("class", "link")
        .style("stroke-width", function(d) { return Math.sqrt(d.value); });

    var node2 = svg2.selectAll(".node")
        .data(graph.nodes)
      .enter().append("circle")
        .attr("class", "node")
        .attr("r", 15)
        .style("fill", function(d) { return color2(d.Topic); })
        .call(force2.drag);

    node2.append("title")
        .text(function(d) { var show= (d.Name + " : " + d.Topic_name); return show });

    force2.on("tick", function() {
      link2.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      node2.attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; });
    });
  });

</script>

<script>

var margin3 = 20,
    diameter3 = 700;

var color3 = d3.scale.linear()
    .domain([-1, 5])
    .range(["hsl(152,80%,80%)", "hsl(228,30%,40%)"])
    .interpolate(d3.interpolateHcl);

var pack3 = d3.layout.pack()
    .padding(2)
    .size([diameter3 - margin3, diameter3 - margin3])
    .value(function(d) { return d.size; })

var svg3 = d3.select("#graphc").append("svg")
    .attr("width", diameter3)
    .attr("height", diameter3)
  .append("g")
    .attr("transform", "translate(" + diameter3 / 2 + "," + diameter3 / 2 + ")");

d3.json("topicsauth.json", function(error, root) {
  if (error) throw error;

  var focus = root,
      nodes = pack3.nodes(root),
      view;

  var circle = svg3.selectAll("circle")
      .data(nodes)
    .enter().append("circle")
      .attr("class", function(d) { return d.parent ? d.children ? "node" : "node node--leaf" : "node node--root"; })
      .style("fill", function(d) { return d.children ? color3(d.depth) : null; })
      .on("click", function(d) { if (focus !== d) zoom(d), d3.event.stopPropagation(); });

  var text3 = svg3.selectAll("text")
      .data(nodes)
    .enter().append("text")
      .attr("class", "label")
      .style("fill-opacity", function(d) { return d.parent === root ? 1 : 0; })
      .style("display", function(d) { return d.parent === root ? "inline" : "none"; })
      .text(function(d) { return d.name; });

  var node3 = svg3.selectAll("circle,text");

  d3.select("#graphc")
      //.style("background", color3(-1))
      .on("click", function() { zoom(root); });

  zoomTo([root.x, root.y, root.r * 2 + margin3]);

  function zoom(d) {
    var focus0 = focus; focus = d;

    var transition = d3.transition()
        .duration(d3.event.altKey ? 7500 : 750)
        .tween("zoom", function(d) {
          var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin3]);
          return function(t) { zoomTo(i(t)); };
        });

    transition.selectAll("text")
      .filter(function(d) { return d.parent === focus || this.style.display === "inline"; })
        .style("fill-opacity", function(d) { return d.parent === focus ? 1 : 0; })
        .each("start", function(d) { if (d.parent === focus) this.style.display = "inline"; })
        .each("end", function(d) { if (d.parent !== focus) this.style.display = "none"; });
  }

  function zoomTo(v) {
    var k = diameter3 / v[2]; view = v;
    node3.attr("transform", function(d) { return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")"; });
    circle.attr("r", function(d) { return d.r * k; });
  }
});

d3.select(self.frameElement).style("height", diameter3 + "px");

</script>

';
   $content = ossn_set_page_layout('newsfeed', $contents);
   echo ossn_view_page($title, $content);       
}


//this line is used to register initliize function to ossn system
ossn_register_callback('ossn', 'init', 'ossn_analysis');
?>
